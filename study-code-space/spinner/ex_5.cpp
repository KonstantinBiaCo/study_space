#include <iostream>
//сравнение эл. с выводом наибольшего
int diff(int *arr)
{
    if (arr[0] > arr[1]) return arr[0];
    return arr[1];
}
int main()
{
    //кол-во свободных мест по середине, кол-во школьников
    int N, k;
    std::cin >> N >> k;
    int *K = new int(k);
    int parts[*K][2]; //двойной массив под кол-во школьников
    for (int i = 0; i < k; i++) 
    {
        parts[i][0] = 0;
        parts[i][1] = 0;
    }
    //выглядит parts, к примеру, след. образом (k = 3):
    // {{0,0},
    //  {0,0},
    //  {0,0}}
    //допустим начальное N = 10
    //первый школьник делит его на два интервала: 4 и 5, 
    //поэтому первая строчка parts становится {4,5}
    //когда садится второй школьник, он проверяет интервалы у других школьников,
    //выбирая наибольший. У нас он сядет на инт. 5 поделив его на  2 и 2 => вторая строчка {2,2}
    //при этом parts[0][1] = 0
    //и т.д пока все не сядут и получится итоговая табличка:
    // {{0,0},
    //  {2,2},
    //  {1,2}}
    //где ответом будет 1 и 2
    int index = 0; //номер последнего школьника с наибольшим значением
    for (int i = 0; i < k; i++)
    {
        
        for (int j = 0; j < k; j++) 
        if (diff(parts[j]) > N) 
        {
            N = diff(parts[j]);
            index = j;
        }
        if (parts[index][0] == N) parts[index][0] = 0;
        else parts[index][1] = 0;
        if(N % 2 == 0)
        {
            parts[i][0] = N/2 - 1;
            parts[i][1] = N/2;
        }
        else 
        {
            parts[i][0] = (N-1)/2;
            parts[i][1] = (N-1)/2;
        }
        N = 0;
    }
    //выводим последнего школьника
    std::cout << parts[k - 1][0] << "\n" << parts[k - 1][1] << "\n";
    return 0;
}